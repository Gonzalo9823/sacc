generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            Int           @id @default(autoincrement())
  name          String?
  email         String        @unique
  password      String
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  reservations  Reservation[]
  role          UserRole
  stations      UserStation[]
  enabled       Boolean
}

enum UserRole {
  ADMIN
  USER
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserStation {
  user   User @relation(fields: [userId], references: [id])
  userId Int

  station   Station @relation(fields: [stationId], references: [id])
  stationId Int

  @@id([userId, stationId])
}

model Station {
  id              Int           @id @default(autoincrement())
  location        String
  lockers         Locker[]
  allowedForUsers UserStation[]
}

model Locker {
  id           Int           @id @default(autoincrement())
  height       Float
  width        Float
  status       LockerStatus
  stationId    Int
  station      Station       @relation(fields: [stationId], references: [id])
  reservations Reservation[]
  available    Boolean
}

enum LockerStatus {
  EMPTY
  USED
  RESERVED
  CONFIRMED
}

model Reservation {
  id           Int      @id @default(autoincrement())
  clientEmail  String
  reservedById Int
  reservedBy   User     @relation(fields: [reservedById], references: [id])
  lockerId     Int
  locker       Locker   @relation(fields: [lockerId], references: [id])
  confirmed    Boolean
  completed    Boolean
  createdAt    DateTime @default(now())
}
